terraform {
  required_providers {
    docker = {
      source = "kreuzwerker/docker"
    }
    postgresql = {
      source = "cyrilgdn/postgresql"
      version = "1.8.1"
    }
  }
}

provider "docker" {
  host = "unix:///var/run/docker.sock"
}

resource "docker_image" "app_image" {
  name = "snahider/devopslab-pet-clinic:production-latest"
}

resource "docker_container" "app" {
  name = "petclinic-dev"
  image = docker_image.app_image.latest
  ports {
    internal = 8080
    external = 9966
  }
}

resource "local_file" "postgresql_data" {
    filename = "/mysql/data"
}

resource "docker_image" "postgresql" {
  name = "postgresql:latest"
}

resource "random_password" "postgresql_root_password" {
  length = 16
}

output "my_password" {
  value = random_password.postgresql_root_password.result
}

resource "docker_container" "postgresql" {
  name = "postgresql"
  image = docker_image.postgresql.latest
  env = [
    "POSTGRES_PASSWORD=${random_password.postgresql_root_password.result}"
  ]
  mounts {
    source = local_file.postgresql_data.filename
    target = "/var/lib/postgresql/data"
    type = "bind"
  }
  ports {
    internal = 5432
    external = 5432
  }
}

provider "postgresql" {
  host            = "127.0.0.1"
  port            = 5432
  database        = "petclinic"
  username        = "root"
  password        = random_password.postgresql_root_password.result
  sslmode         = "disable"
  connect_timeout = 10
}

resource "postgresql_database" "my_db1" {
  name     = "petclinic"
}